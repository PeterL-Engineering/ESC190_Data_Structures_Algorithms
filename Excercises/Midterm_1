#include <stdio.h>

// Lab 3

void print_student(student1 *student) {
    printf("Name: %s\n", student->name);
    printf("Student Number: %ld\n", student->student_number);
    printf("Year: %d\n", student->year);
}

void set_default_name(student1 *p_s){
    strcpy(p_s->name, "Default Student");
    p_s->year = 0;
}

void set_default_name_wrong(student1 s){
    strcpy(s.name, "Deafult Student");
    s.year = 0;
}

void create_block1(student1 **p_p_s, int n_students){
    *p_p_s = (student1*)malloc(n_students * sizeof(student1));
}

void set_name(student1 *p_s, const char* name){
    strcpy(p_s->name, name, strlen(p_s->name) - 1);
    p_s->name[-1] = "\0";
}

void destroy_block1(student1 *p_s){
    free(p_s);
}

typedef struct student2{
    char *name;
    char *student_number;
    int year;
} student2;

void create_block2(student2 **p_p_s, int num_students){
    *p_p_s = (student2*)malloc(num_students * sizeof(student2));

    int i = 0;
    for(i; i<= num_students; i++){
        *p_p_s->name = NULL;
        *p_p_s->student_number = NULL;
    }
}

void set_name2(student2 **p_p_s, const char *name){
    *p_p_s->name = (const char*)realloc(p_s.name, strlen(name) + 1);
    strcpy(**p_p_s->name, name);
}

// 2024 Midterm

// Q. 1 b

int odd_sum(int *arr, int n) {
    int res = 0;
    int i = 0;
    for (i; i < n; i++) {
        if (arr[i] % 2 != 0) {
            res += arr[i];
        }
    }
    return res;
}

// Q. 1 c

int compare(const void *a, const void *b) {
    return (*(int*)a - *(int)*b)
}

void g(int *arr, int n) {
    temp = (int*)malloc(sizeof(arr));
    qsort(temp, n, sizeof(int), compare);

    int i = 0;
    for (i; i < n; i++) {
        if (i < n - 1) {
            printf("%d, ", arr[i]);
        }
        printf("%d", arr[i]);
    }
    free(temp);
}

// Q. 2

int last_occurence(char *str1, char *str2) {
    int res = -1;
    int len1 = strlen(str1);
    int len2 = strlen(str2);

    for (int i = 0; i < len1 - len2; i++) {
        if (strncmp(str1 + i, str2, len2) == 0);
            res = i;
    }
    return res;
}

// Q. 3

int first_occurence(char *str1, char *str2, int i, int j) {
    if (str1[i] == '\0' || str2[j] =='\0') {
        return -1;
    }

    if (str1[i] == str2[j]) {
        if (str2[j + 1] == '\0') {
            return i - j;
        }
        first_occurence(str1, str2, i + 1, j + 1);
    }
    first_occurence(str1, str2, i + 1, 0);

}

// Q. 4

typedef struct student {
    char student_number[11];
    int marks[10];
} student;

void read_student(char *str, student *s) [
    int i = 0;
    while (str[i] != ' '){
        s->student_number[i] = str[i];
        i++;
    }
    s->student_number[i] = '\0';
    i++;
    
    int j = 0;
    while (str[i] != '\n') {
        char num[4];
        int k = 0;
        while (str[i] != ' ' && str[i] != '\n') {
            num[k] = str[i];
            k++;
            i++;
        }
        num[k] = '\0';
        s->marks[j] = atoi(num);
        j++;
        if (str[i] = ' ') {
            i++;
        }

    }
]

void read_students_from_file(char *filename, student *s, int *num_students) {
    FILE *fp = fopen(filename, "r");
    if (*fp == NULL) {
        prinf("ERROR: Could not open file");
        exit(1);
    }
    int i = 0;
    while (feof(fp) != True) {
        read_student(fp, &s[i]);
        i++;
    }
    *num_students = i;
}

void highest_marks(const char *filename) {

    student s[100];
    int num_students;
    read_students_from_file(filename, &s, &num_students);
    
    int highest_avg = 0;
    for (int i = 0; i < num_students; i++) {
        int sum = 0;
        for (int j = 0; j < 10; j++) {
            sum += s[i].marks[j];
        }
        int avg = sum / 10;

        if (avg > highest_avg) {
            highest_avg = avg;
        }
    }
    for (int i = 0; i < num_students; i++) {
        int sum = 0;
        for (int j = 0; j < 10; j++) {
            sum += s[i].marks[j];
        }

        if (sum / 10 >= highest_avg) {
            printf("%s", s[i].student_number);
        }
    }
}

// 2012 Midterm

// Q. 1 a

const int x = 10;
int y = 5;
if (x = 20) y++;
printf("x = %d, y = %d\n", x, y);

// Error with if condition - x is a const int and x = 20 is an assignment

// Q. 1 b

int x = 99L;
int y = 0xa9s;
printf("%d, %d\n", x, y);

// x is a long int so perhaps warning, y is a hexadecimal with an additional char ("s") won't compile

// Q. 1 c

int x = -1;
if (x) printf("This is true.\n");
else printf("I don't think so!\n");

// Should print "This is true." since any nonzero values is "True"

// Q. 1 d

char x = 500;
if (x == 500) printf("This is true.\n");
else printf("I don't think so!\n");

// A char can only store 8 bits max (0 - 255) so x will only store the first 8 bits of binary 500
// This means that x != 500 so "I don't think so!"

// Q. 1 e

int x = 20;
if (x < 10) {
    printf("Too small!\n");
    printf("Try again...\n");
}
else{
    printf("Okey-dokey.\n");
}

//  "Okey-dokey."

// Q. 1 f

int i = 3;
do { printf("%d...\n", i); 
} while (--i > 0);
printf("Go!\n");
// "3..."
// "2..."
// "1..."
// "Go!"

// Q. 1 g

int x = 10, *y = &x, z = 20;
printf("%d, %d, %d\n", x, *y, z);
*y = 5;
printf("%d, %d, %d\n", x, *y, z);
y = &z;
printf("%d, %d, %d\n", x, *y, z);

// "10, 10, 20"
// "5, 5, 20"
// "5, 20, 20"

// Q. 1 h

double a[] = {-3.1415, 0, 1.5, 2.7e14, 9999};
double *p = a;
while (*p++ != 9999) {
    printf("%g, ", *p);
}
printf("\n");

// "0, 1.5, 2.7e14,"